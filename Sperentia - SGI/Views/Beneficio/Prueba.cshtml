@* @model Sperientia___SGI.Models.dbModels.Beneficio *@
@* @model Sperientia___SGI.ViewModel.BeneficioViewModel *@
@model Sperientia___SGI.ViewModel.CapacitacionViewModel

@{
    ViewData["Title"] = "Prueba Beneficio";
    Layout = "_LayoutAdmin";
}


<section class="section">
    <div class="row">
        <div class="col-lg-12">

            <div class="card ">
                <div class="card-body ">
                    <h5 class="card-title text-center pb-0 fs-4">Nuevo</h5>
                    <br/>
                    <div class="container-sm ">

                        <div id="errorMessages" class="d-flex justify-content-center text-danger align-center"></div>
                        
                        <label>Usuario ID: @ViewBag.CurrentUserId</label>

                        </br>

                     @*    <form action="#" class="form-horizontal">
                            <div class="row mb-3 d-flex">

                                <div class="col-md-4 text-end">
                                    <label asp-for="BeneficiosSeleccionados" class="control-label " id="beneficioSelect">Beneficio</label>
                                </div>
                                <div class="col-md-4">
                                    <select class="form-select" multiple asp-for="BeneficiosSeleccionados" asp-items="Model.Beneficios"></select>
                                </div>
                                <div class="col-md-4 text-start">
                                    <button type="button" class="btn btn-success" id="addInputBtn"><i class="bi bi-plus-lg"></i></button>
                                </div>
                            </div>
                        </form> *@
                        @* <form id="beneficioForm" asp-action="BeneficioCrear" class="form-horizontal">

                            <!-- Contenedor para los nuevos campos de texto -->
                            <div id="inputsContainer"></div>

                            <br/>

                            <div class="row mb-3">

                                <div class="d-inline-flex justify-content-center" role="group">

                                    <a asp-action="Index" class="btn btn-warning btn-sm m-1"><i class="bi bi-ban" aria-hidden="true"></i> Cancelar</a>
                                    <button type="submit" class="btn btn-success btn-sm m-1">
                                        <i class="bi bi-save"></i> Crear
                                    </button>

                                </div>
                            </div>

                        </form> *@

@*                         <form id="beneficioForm" asp-action="BeneficioCrear" class="form-horizontal">
                            <div id="inputsContainer">
                                <!-- Beneficios que ya tiene el usuario -->
                                <label>Beneficios Asignados:</label>
                                <ul>
                                    @foreach (var beneficio in Model.Beneficios)
                                    {
                                        <li>@beneficio.Text</li>
                                    }
                                </ul>
                            </div>

                            <br />

                            <div class="row mb-3 d-flex">
                                <div class="col-md-4 text-start">
                                    <button type="button" class="btn btn-success" id="addInputBtn">
                                        <i class="bi bi-plus-lg"></i> Agregar Beneficios
                                    </button>
                                </div>
                            </div>

                            <!-- Lista de Checkboxes (Oculta por defecto) -->
                            <div id="checkboxContainer" class="mt-3" style="display: none;">
                                <label>Selecciona nuevos beneficios:</label>
                                @foreach (var beneficio in Model.BeneficiosDisponibles)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="BeneficiosSeleccionados" value="@beneficio.Value" id="beneficio_@beneficio.Value">
                                        <label class="form-check-label" for="beneficio_@beneficio.Value">@beneficio.Text</label>
                                    </div>
                                }
                                <button type="submit" class="btn btn-primary mt-2">Guardar Beneficios</button>
                            </div>

                            <div class="row mb-3">
                                <div class="d-inline-flex justify-content-center" role="group">
                                    <a asp-action="Index" class="btn btn-warning btn-sm m-1"><i class="bi bi-ban"></i> Cancelar</a>
                                </div>
                            </div>
                        </form>
 *@
                        <form method="post" asp-action="GuardarCapacitaciones">
                            <div class="row mb-3">
                                <label for="cursos" class="col-md-5 col-lg-6 col-form-label">Certificaciones</label>
                                <div class="col-md-7 col-lg-6">
                                    <select asp-for="capacitacionId"
                                            asp-items="Model.TipoCapacitacion"
                                            id="capacitaciones"
                                            multiple="multiple"
                                            class="form-control">
                                    </select>
                                    <div id="inputs-capacitaciones" class="mt-3"></div>
                                </div>
                            </div>

                            <!-- Input container para los nombres -->
                            <div id="inputs-container" class="my-3 row"></div>

                            <!-- Submit button -->
                            <button type="submit" class="btn btn-primary">Guardar</button>
                        </form>


                    </div>
                </div>

            </div>
        </div>
    </div>
</section>



@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // document.getElementById("addInputBtn").addEventListener("click", function () {
        //     var checkboxContainer = document.getElementById("checkboxContainer");
        //     checkboxContainer.style.display = checkboxContainer.style.display === "none" ? "block" : "none";
        // });

        const choices = new Choices('#capacitaciones', {
            removeItemButton: true,
            placeholderValue: '--Seleccionar--',
            shouldSort: false
        });

        const containerInputs = document.getElementById('inputs-capacitaciones');
        const inputMap = new Map();

        document.getElementById('capacitaciones').addEventListener('change', function () {
            const selectedOptions = Array.from(this.selectedOptions).map((opt, index) => ({
                value: opt.value,
                label: opt.text,
                index: index
            }));

             containerInputs.innerHTML = '';

            selectedOptions.forEach((item, i) => {
                const div = document.createElement('div');
                div.classList.add('mb-2');

                div.innerHTML = `
                    <input type="hidden" name="Capacitaciones[${i}].IdCapacitacionTipo" value="${item.value}" />
                    <label class="form-label">${item.label}:</label>
                    <input type="text" name="Capacitaciones[${i}].Descripcion" class="form-control" placeholder="Ingresa el nombre" />
                `;
                containerInputs.appendChild(div);
            });
      

            // // Eliminar inputs que ya no están seleccionados
            // Array.from(inputMap.keys()).forEach(key => {
            //     if (!selectedOptions.some(item => item.value === key)) {
            //         containerInputs.removeChild(inputMap.get(key));
            //         inputMap.delete(key);
            //     }
            // });

            // Actualizar el campo oculto con los IDs seleccionados
            const selectedIds = selectedOptions.map(item => item.value);
            document.getElementById('CapacitacionIds').value = selectedIds.join(',');
        });



    </script>

@*     <script>
        document.getElementById('addInputBtn').addEventListener('click', function() {
            // Crear un nuevo contenedor para el input
            var newInputDiv = document.createElement('div');
            newInputDiv.classList.add('row', 'mb-3');

            // Crear la primera columna (label)
            var labelDiv = document.createElement('div');
            labelDiv.classList.add('col-md-4', 'text-end');
            var label = document.createElement('label');
            label.classList.add('control-label');
            label.textContent = '';
            labelDiv.appendChild(label);

            // Crear la segunda columna (input)
            var inputDiv = document.createElement('div');
            inputDiv.classList.add('col-md-4');
            var input = document.createElement('input');
            input.classList.add('form-control');
            input.type = 'text';
            input.name = 'nuevoBeneficio[]'; // datos como un array
            inputDiv.appendChild(input);

            // Crear la ultima columna (button)
            var buttonDiv = document.createElement('div');
            buttonDiv.classList.add('col-md-4', 'text-start');
            var button = document.createElement('button');
            button.classList.add('btn', 'btn-danger');
            button.textContent = '-';
            buttonDiv.appendChild(button);

            // Añadir las columnas al contenedor de nuevo input
            newInputDiv.appendChild(labelDiv);
            newInputDiv.appendChild(inputDiv);
            newInputDiv.appendChild(buttonDiv);

            console.log(inputDiv);

            // Insertar el nuevo input en el contenedor
            document.getElementById('inputsContainer').appendChild(newInputDiv);

            // Agregar un evento al botón para eliminar el div que lo contiene
            button.addEventListener('click', function() {
                newInputDiv.remove();
            });
        });

        document.getElementById("beneficioForm").addEventListener("submit", function (event) {
            event.preventDefault(); 

            let formData = new FormData(event.target); 
            fetch(event.target.action, {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // alert(data.message);
                    window.location.href = "Beneficio/Prueba"; 
                } else {
                    let errorContainer = document.getElementById("errorMessages");
                    errorContainer.innerHTML = ""; 
                    data.errors.forEach(error => {
                        let errorElement = document.createElement("div");
                        errorElement.classList.add("text-danger");
                        errorElement.textContent = error;
                        errorContainer.appendChild(errorElement);
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
        });

    </script> *@
}