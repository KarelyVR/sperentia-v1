// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace Sperientia___SGI.Models.dbModelsPOCO
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface ISperientiaContextPOCO : IDisposable
    {
        DbSet<Ausencia> Ausencias { get; set; } // Ausencia
        DbSet<Beneficio> Beneficios { get; set; } // Beneficio
        DbSet<BeneficioUsuario> BeneficioUsuarios { get; set; } // BeneficioUsuario
        DbSet<CapacitacionTipo> CapacitacionTipoes { get; set; } // CapacitacionTipo
        DbSet<CapacitacionUsuario> CapacitacionUsuarios { get; set; } // CapacitacionUsuario
        DbSet<Departamento> Departamentoes { get; set; } // Departamento
        DbSet<Direccion> Direccions { get; set; } // Direccion
        DbSet<Divisa> Divisas { get; set; } // Divisa
        DbSet<Empresa> Empresas { get; set; } // Empresa
        DbSet<EstadoCivil> EstadoCivils { get; set; } // EstadoCivil
        DbSet<Inventario> Inventarios { get; set; } // Inventario
        DbSet<InventarioAsignacion> InventarioAsignacions { get; set; } // InventarioAsignacion
        DbSet<InventarioCategoria> InventarioCategorias { get; set; } // InventarioCategoria
        DbSet<InventarioGeneral> InventarioGenerals { get; set; } // InventarioGeneral
        DbSet<InventarioLibro> InventarioLibroes { get; set; } // InventarioLibro
        DbSet<NivelEstudio> NivelEstudios { get; set; } // NivelEstudio
        DbSet<Pai> Pais { get; set; } // Pais
        DbSet<Pronombre> Pronombres { get; set; } // Pronombre
        DbSet<Servicio> Servicios { get; set; } // Servicio
        DbSet<ServicioUsuario> ServicioUsuarios { get; set; } // ServicioUsuario
        DbSet<SolicitudVacacione> SolicitudVacaciones { get; set; } // SolicitudVacaciones
        DbSet<SolicitudVacacionesDia> SolicitudVacacionesDias { get; set; } // SolicitudVacacionesDias
        DbSet<SolicitudVacacionesEstatu> SolicitudVacacionesEstatus { get; set; } // SolicitudVacacionesEstatus
        DbSet<TallaPlayera> TallaPlayeras { get; set; } // TallaPlayera
        DbSet<TipoContrato> TipoContratoes { get; set; } // TipoContrato
        DbSet<UsuarioInformacion> UsuarioInformacions { get; set; } // UsuarioInformacion
        DbSet<UsuarioLogin> UsuarioLogins { get; set; } // UsuarioLogin

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);

        // Scalar Valued Functions
        int FnDiagramobjects(); // dbo.fn_diagramobjects
    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class SperientiaContextPOCO : DbContext, ISperientiaContextPOCO
    {
        public SperientiaContextPOCO()
        {
        }

        public SperientiaContextPOCO(DbContextOptions<SperientiaContextPOCO> options)
            : base(options)
        {
        }

        public DbSet<Ausencia> Ausencias { get; set; } // Ausencia
        public DbSet<Beneficio> Beneficios { get; set; } // Beneficio
        public DbSet<BeneficioUsuario> BeneficioUsuarios { get; set; } // BeneficioUsuario
        public DbSet<CapacitacionTipo> CapacitacionTipoes { get; set; } // CapacitacionTipo
        public DbSet<CapacitacionUsuario> CapacitacionUsuarios { get; set; } // CapacitacionUsuario
        public DbSet<Departamento> Departamentoes { get; set; } // Departamento
        public DbSet<Direccion> Direccions { get; set; } // Direccion
        public DbSet<Divisa> Divisas { get; set; } // Divisa
        public DbSet<Empresa> Empresas { get; set; } // Empresa
        public DbSet<EstadoCivil> EstadoCivils { get; set; } // EstadoCivil
        public DbSet<Inventario> Inventarios { get; set; } // Inventario
        public DbSet<InventarioAsignacion> InventarioAsignacions { get; set; } // InventarioAsignacion
        public DbSet<InventarioCategoria> InventarioCategorias { get; set; } // InventarioCategoria
        public DbSet<InventarioGeneral> InventarioGenerals { get; set; } // InventarioGeneral
        public DbSet<InventarioLibro> InventarioLibroes { get; set; } // InventarioLibro
        public DbSet<NivelEstudio> NivelEstudios { get; set; } // NivelEstudio
        public DbSet<Pai> Pais { get; set; } // Pais
        public DbSet<Pronombre> Pronombres { get; set; } // Pronombre
        public DbSet<Servicio> Servicios { get; set; } // Servicio
        public DbSet<ServicioUsuario> ServicioUsuarios { get; set; } // ServicioUsuario
        public DbSet<SolicitudVacacione> SolicitudVacaciones { get; set; } // SolicitudVacaciones
        public DbSet<SolicitudVacacionesDia> SolicitudVacacionesDias { get; set; } // SolicitudVacacionesDias
        public DbSet<SolicitudVacacionesEstatu> SolicitudVacacionesEstatus { get; set; } // SolicitudVacacionesEstatus
        public DbSet<TallaPlayera> TallaPlayeras { get; set; } // TallaPlayera
        public DbSet<TipoContrato> TipoContratoes { get; set; } // TipoContrato
        public DbSet<UsuarioInformacion> UsuarioInformacions { get; set; } // UsuarioInformacion
        public DbSet<UsuarioLogin> UsuarioLogins { get; set; } // UsuarioLogin

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Server=.\SQLEXPRESS;Database=Spiritea-SGI-Original;Trusted_Connection=True;MultipleActiveResultSets=true");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new AusenciaConfiguration());
            modelBuilder.ApplyConfiguration(new BeneficioConfiguration());
            modelBuilder.ApplyConfiguration(new BeneficioUsuarioConfiguration());
            modelBuilder.ApplyConfiguration(new CapacitacionTipoConfiguration());
            modelBuilder.ApplyConfiguration(new CapacitacionUsuarioConfiguration());
            modelBuilder.ApplyConfiguration(new DepartamentoConfiguration());
            modelBuilder.ApplyConfiguration(new DireccionConfiguration());
            modelBuilder.ApplyConfiguration(new DivisaConfiguration());
            modelBuilder.ApplyConfiguration(new EmpresaConfiguration());
            modelBuilder.ApplyConfiguration(new EstadoCivilConfiguration());
            modelBuilder.ApplyConfiguration(new InventarioConfiguration());
            modelBuilder.ApplyConfiguration(new InventarioAsignacionConfiguration());
            modelBuilder.ApplyConfiguration(new InventarioCategoriaConfiguration());
            modelBuilder.ApplyConfiguration(new InventarioGeneralConfiguration());
            modelBuilder.ApplyConfiguration(new InventarioLibroConfiguration());
            modelBuilder.ApplyConfiguration(new NivelEstudioConfiguration());
            modelBuilder.ApplyConfiguration(new PaiConfiguration());
            modelBuilder.ApplyConfiguration(new PronombreConfiguration());
            modelBuilder.ApplyConfiguration(new ServicioConfiguration());
            modelBuilder.ApplyConfiguration(new ServicioUsuarioConfiguration());
            modelBuilder.ApplyConfiguration(new SolicitudVacacioneConfiguration());
            modelBuilder.ApplyConfiguration(new SolicitudVacacionesDiaConfiguration());
            modelBuilder.ApplyConfiguration(new SolicitudVacacionesEstatuConfiguration());
            modelBuilder.ApplyConfiguration(new TallaPlayeraConfiguration());
            modelBuilder.ApplyConfiguration(new TipoContratoConfiguration());
            modelBuilder.ApplyConfiguration(new UsuarioInformacionConfiguration());
            modelBuilder.ApplyConfiguration(new UsuarioLoginConfiguration());
        }


        // Scalar Valued Functions

        [DbFunction("fn_diagramobjects", "dbo")]
        public int FnDiagramobjects()
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }
    }

    #endregion

    #region Database context factory

    public class SperientiaContextPOCOFactory : IDesignTimeDbContextFactory<SperientiaContextPOCO>
    {
        public SperientiaContextPOCO CreateDbContext(string[] args)
        {
            return new SperientiaContextPOCO();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeSperientiaContextPOCO : ISperientiaContextPOCO
    {
        public DbSet<Ausencia> Ausencias { get; set; } // Ausencia
        public DbSet<Beneficio> Beneficios { get; set; } // Beneficio
        public DbSet<BeneficioUsuario> BeneficioUsuarios { get; set; } // BeneficioUsuario
        public DbSet<CapacitacionTipo> CapacitacionTipoes { get; set; } // CapacitacionTipo
        public DbSet<CapacitacionUsuario> CapacitacionUsuarios { get; set; } // CapacitacionUsuario
        public DbSet<Departamento> Departamentoes { get; set; } // Departamento
        public DbSet<Direccion> Direccions { get; set; } // Direccion
        public DbSet<Divisa> Divisas { get; set; } // Divisa
        public DbSet<Empresa> Empresas { get; set; } // Empresa
        public DbSet<EstadoCivil> EstadoCivils { get; set; } // EstadoCivil
        public DbSet<Inventario> Inventarios { get; set; } // Inventario
        public DbSet<InventarioAsignacion> InventarioAsignacions { get; set; } // InventarioAsignacion
        public DbSet<InventarioCategoria> InventarioCategorias { get; set; } // InventarioCategoria
        public DbSet<InventarioGeneral> InventarioGenerals { get; set; } // InventarioGeneral
        public DbSet<InventarioLibro> InventarioLibroes { get; set; } // InventarioLibro
        public DbSet<NivelEstudio> NivelEstudios { get; set; } // NivelEstudio
        public DbSet<Pai> Pais { get; set; } // Pais
        public DbSet<Pronombre> Pronombres { get; set; } // Pronombre
        public DbSet<Servicio> Servicios { get; set; } // Servicio
        public DbSet<ServicioUsuario> ServicioUsuarios { get; set; } // ServicioUsuario
        public DbSet<SolicitudVacacione> SolicitudVacaciones { get; set; } // SolicitudVacaciones
        public DbSet<SolicitudVacacionesDia> SolicitudVacacionesDias { get; set; } // SolicitudVacacionesDias
        public DbSet<SolicitudVacacionesEstatu> SolicitudVacacionesEstatus { get; set; } // SolicitudVacacionesEstatus
        public DbSet<TallaPlayera> TallaPlayeras { get; set; } // TallaPlayera
        public DbSet<TipoContrato> TipoContratoes { get; set; } // TipoContrato
        public DbSet<UsuarioInformacion> UsuarioInformacions { get; set; } // UsuarioInformacion
        public DbSet<UsuarioLogin> UsuarioLogins { get; set; } // UsuarioLogin

        public FakeSperientiaContextPOCO()
        {
            _database = new FakeDatabaseFacade(new SperientiaContextPOCO());

            Ausencias = new FakeDbSet<Ausencia>("IdAusencia");
            Beneficios = new FakeDbSet<Beneficio>("IdBeneficio");
            BeneficioUsuarios = new FakeDbSet<BeneficioUsuario>("IdUsuarioInformacion", "IdBeneficio");
            CapacitacionTipoes = new FakeDbSet<CapacitacionTipo>("IdCapacitacionTipo");
            CapacitacionUsuarios = new FakeDbSet<CapacitacionUsuario>("IdCapacitacion");
            Departamentoes = new FakeDbSet<Departamento>("IdDepartamento");
            Direccions = new FakeDbSet<Direccion>("IdDireccion");
            Divisas = new FakeDbSet<Divisa>("IdDivisa");
            Empresas = new FakeDbSet<Empresa>("IdEmpresa");
            EstadoCivils = new FakeDbSet<EstadoCivil>("IdEstadoCivil");
            Inventarios = new FakeDbSet<Inventario>("IdInventario");
            InventarioAsignacions = new FakeDbSet<InventarioAsignacion>("IdInventario", "IdUsuario");
            InventarioCategorias = new FakeDbSet<InventarioCategoria>("IdCategoria");
            InventarioGenerals = new FakeDbSet<InventarioGeneral>("IdInventario");
            InventarioLibroes = new FakeDbSet<InventarioLibro>("IdInventario");
            NivelEstudios = new FakeDbSet<NivelEstudio>("IdNivelEstudio");
            Pais = new FakeDbSet<Pai>("IdPais");
            Pronombres = new FakeDbSet<Pronombre>("IdPronombre");
            Servicios = new FakeDbSet<Servicio>("IdServicio");
            ServicioUsuarios = new FakeDbSet<ServicioUsuario>("IdServicio", "IdUsuario");
            SolicitudVacaciones = new FakeDbSet<SolicitudVacacione>("IdSolicitud");
            SolicitudVacacionesDias = new FakeDbSet<SolicitudVacacionesDia>("IdSolicitud", "Fecha");
            SolicitudVacacionesEstatus = new FakeDbSet<SolicitudVacacionesEstatu>("IdEstatus");
            TallaPlayeras = new FakeDbSet<TallaPlayera>("IdTallaPlayera");
            TipoContratoes = new FakeDbSet<TipoContrato>("IdTipoContrato");
            UsuarioInformacions = new FakeDbSet<UsuarioInformacion>("IdUsuarioLogin");
            UsuarioLogins = new FakeDbSet<UsuarioLogin>("IdUsuarioLogin");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Add(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual Task AddRangeAsync(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual async Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual void AddRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AddRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Attach(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual TEntity Find<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual object Find(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Remove(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Update(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression)
        {
            throw new NotImplementedException();
        }


        // Scalar Valued Functions

        // dbo.fn_diagramobjects
        public int FnDiagramobjects()
        {
            return default(int);
        }
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> :
        DbSet<TEntity>,
        IQueryable<TEntity>,
        IAsyncEnumerable<TEntity>,
        IListSource,
        IResettableService
        where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private ObservableCollection<TEntity> _data;
        private IQueryable _query;
        public override IEntityType EntityType { get; }

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override ValueTask<EntityEntry<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken = default)
        {
            return new ValueTask<EntityEntry<TEntity>>(Task<EntityEntry<TEntity>>.Factory.StartNew(() => Add(entity), cancellationToken));
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override Task AddRangeAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities), cancellationToken);
        }

        public override EntityEntry<TEntity> Attach(TEntity entity)
        {
            if (entity == null) throw new ArgumentNullException("entity");
            return Add(entity);
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void AttachRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override EntityEntry<TEntity> Remove(TEntity entity)
        {
            _data.Remove(entity);
            return null;
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override EntityEntry<TEntity> Update(TEntity entity)
        {
            _data.Remove(entity);
            _data.Add(entity);
            return null;
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public override void UpdateRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var array = entities.ToArray();        RemoveRange(array);
            AddRange(array);
        }

        bool IListSource.ContainsListCollection => true;

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_data); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        public override IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

        public void ResetState()
        {
            _data  = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public Task ResetStateAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.Factory.StartNew(() => ResetState());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : FakeQueryProvider<TEntity>, IAsyncEnumerable<TEntity>, IAsyncQueryProvider
    {
        public FakeDbAsyncQueryProvider(Expression expression) : base(expression)
        {
        }

        public FakeDbAsyncQueryProvider(IEnumerable<TEntity> enumerable) : base(enumerable)
        {
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            var expectedResultType = typeof(TResult).GetGenericArguments()[0];
            var executionResult = typeof(IQueryProvider)
                .GetMethods()
                .First(method => method.Name == nameof(IQueryProvider.Execute) && method.IsGenericMethod)
                .MakeGenericMethod(expectedResultType)
                .Invoke(this, new object[] { expression });

            return (TResult) typeof(Task).GetMethod(nameof(Task.FromResult))
                ?.MakeGenericMethod(expectedResultType)
                .Invoke(null, new[] { executionResult });
        }

        public IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    public abstract class FakeQueryProvider<T> : IOrderedQueryable<T>, IQueryProvider
    {
        private IEnumerable<T> _enumerable;

        protected FakeQueryProvider(Expression expression)
        {
            Expression = expression;
        }

        protected FakeQueryProvider(IEnumerable<T> enumerable)
        {
            _enumerable = enumerable;
            Expression = enumerable.AsQueryable().Expression;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression is MethodCallExpression m)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments().First();
                return (IQueryable) CreateInstance(tElement, expression);
            }

            return CreateQuery<T>(expression);
        }

        public IQueryable<TEntity> CreateQuery<TEntity>(Expression expression)
        {
            return (IQueryable<TEntity>) CreateInstance(typeof(TEntity), expression);
        }

        private object CreateInstance(Type tElement, Expression expression)
        {
            var queryType = GetType().GetGenericTypeDefinition().MakeGenericType(tElement);
            return Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return CompileExpressionItem<object>(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return CompileExpressionItem<TResult>(expression);
        }

        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        public Type ElementType => typeof(T);

        public Expression Expression { get; }

        public IQueryProvider Provider => this;

        private static TResult CompileExpressionItem<TResult>(Expression expression)
        {
            var visitor = new FakeExpressionVisitor();
            var body = visitor.Visit(expression);
            var f = Expression.Lambda<Func<TResult>>(body ?? throw new InvalidOperationException(string.Format("{0} is null", nameof(body))), (IEnumerable<ParameterExpression>) null);
            return f.Compile()();
        }
    }

    public class FakeExpressionVisitor : ExpressionVisitor
    {
    }

    public class FakeDatabaseFacade : DatabaseFacade
    {
        public FakeDatabaseFacade(DbContext context) : base(context)
        {
        }

        public override bool EnsureCreated()
        {
            return true;
        }

        public override Task<bool> EnsureCreatedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureCreated());
        }

        public override bool EnsureDeleted()
        {
            return true;
        }

        public override Task<bool> EnsureDeletedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureDeleted());
        }

        public override bool CanConnect()
        {
            return true;
        }

        public override Task<bool> CanConnectAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(CanConnect());
        }

        public override IDbContextTransaction BeginTransaction()
        {
            return new FakeDbContextTransaction();
        }

        public override Task<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(BeginTransaction());
        }

        public override void CommitTransaction()
        {
        }

        public override Task CommitTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override void RollbackTransaction()
        {
        }

        public override Task RollbackTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override IExecutionStrategy CreateExecutionStrategy()
        {
            return null;
        }

        public override string ToString()
        {
            return string.Empty;
        }
    }

    public class FakeDbContextTransaction : IDbContextTransaction
    {
        public Guid TransactionId => Guid.NewGuid();
        public void Commit() { }
        public void Rollback() { }
        public Task CommitAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public Task RollbackAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public void Dispose() { }
        public ValueTask DisposeAsync() => default;
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Ausencia
    public class Ausencia
    {
        public int IdAusencia { get; set; } // IdAusencia (Primary key)
        public int IdUsuario { get; set; } // IdUsuario
        public DateTime FechaInicio { get; set; } // FechaInicio
        public DateTime? FechaFin { get; set; } // FechaFin
        public string MotivoAusencia { get; set; } // MotivoAusencia (length: 500)

        // Foreign keys

        /// <summary>
        /// Parent UsuarioLogin pointed by [Ausencia].([IdUsuario]) (FK_Ausencia_Usuario)
        /// </summary>
        public UsuarioLogin UsuarioLogin { get; set; } // FK_Ausencia_Usuario
    }

    // Beneficio
    public class Beneficio
    {
        public int IdBeneficio { get; set; } // IdBeneficio (Primary key)
        public string Nombre { get; set; } // Nombre (length: 50)
        public string Descripcion { get; set; } // Descripcion (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child BeneficioUsuarios where [BeneficioUsuario].[IdBeneficio] point to this entity (FK_BeneficioUsuario_Beneficio)
        /// </summary>
        public ICollection<BeneficioUsuario> BeneficioUsuarios { get; set; } // BeneficioUsuario.FK_BeneficioUsuario_Beneficio

        public Beneficio()
        {
            BeneficioUsuarios = new List<BeneficioUsuario>();
        }
    }

    // BeneficioUsuario
    public class BeneficioUsuario
    {
        public int IdUsuarioInformacion { get; set; } // IdUsuarioInformacion (Primary key)
        public int IdBeneficio { get; set; } // IdBeneficio (Primary key)
        public bool EstaAsignado { get; set; } // EstaAsignado

        // Foreign keys

        /// <summary>
        /// Parent Beneficio pointed by [BeneficioUsuario].([IdBeneficio]) (FK_BeneficioUsuario_Beneficio)
        /// </summary>
        public Beneficio Beneficio { get; set; } // FK_BeneficioUsuario_Beneficio

        /// <summary>
        /// Parent UsuarioLogin pointed by [BeneficioUsuario].([IdUsuarioInformacion]) (FK_BeneficioUsuario_Usuario)
        /// </summary>
        public UsuarioLogin UsuarioLogin { get; set; } // FK_BeneficioUsuario_Usuario

        public BeneficioUsuario()
        {
            EstaAsignado = false;
        }
    }

    // CapacitacionTipo
    public class CapacitacionTipo
    {
        public int IdCapacitacionTipo { get; set; } // IdCapacitacionTipo (Primary key)
        public string Descripcion { get; set; } // Descripcion (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child CapacitacionUsuarios where [CapacitacionUsuario].[IdCapacitacionTipo] point to this entity (FK_CapacitacionUsuario_CapacitacionTipo)
        /// </summary>
        public ICollection<CapacitacionUsuario> CapacitacionUsuarios { get; set; } // CapacitacionUsuario.FK_CapacitacionUsuario_CapacitacionTipo

        public CapacitacionTipo()
        {
            CapacitacionUsuarios = new List<CapacitacionUsuario>();
        }
    }

    // CapacitacionUsuario
    public class CapacitacionUsuario
    {
        public int IdCapacitacion { get; set; } // IdCapacitacion (Primary key)
        public int IdUsuario { get; set; } // IdUsuario
        public int IdCapacitacionTipo { get; set; } // IdCapacitacionTipo
        public string Nombre { get; set; } // Nombre (length: 50)

        // Foreign keys

        /// <summary>
        /// Parent CapacitacionTipo pointed by [CapacitacionUsuario].([IdCapacitacionTipo]) (FK_CapacitacionUsuario_CapacitacionTipo)
        /// </summary>
        public CapacitacionTipo CapacitacionTipo { get; set; } // FK_CapacitacionUsuario_CapacitacionTipo

        /// <summary>
        /// Parent UsuarioLogin pointed by [CapacitacionUsuario].([IdUsuario]) (FK_CapacitacionUsuario_Usuario)
        /// </summary>
        public UsuarioLogin UsuarioLogin { get; set; } // FK_CapacitacionUsuario_Usuario
    }

    // Departamento
    public class Departamento
    {
        public int IdDepartamento { get; set; } // IdDepartamento (Primary key)
        public string Nombre { get; set; } // Nombre (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child UsuarioInformacions where [UsuarioInformacion].[IdDepartamento] point to this entity (FK_UsuarioInformacion_Departamento)
        /// </summary>
        public ICollection<UsuarioInformacion> UsuarioInformacions { get; set; } // UsuarioInformacion.FK_UsuarioInformacion_Departamento

        public Departamento()
        {
            UsuarioInformacions = new List<UsuarioInformacion>();
        }
    }

    // Direccion
    public class Direccion
    {
        public int IdDireccion { get; set; } // IdDireccion (Primary key)
        public int IdUsuario { get; set; } // IdUsuario
        public string Direccion_ { get; set; } // Direccion (length: 500)
        public decimal? Latitud { get; set; } // Latitud
        public decimal? Longitud { get; set; } // Longitud
        public string GoogleMapsUrl { get; set; } // GoogleMapsUrl (length: 500)
        public string ComprobanteDomicilioUrl { get; set; } // ComprobanteDomicilioUrl (length: 500)

        // Foreign keys

        /// <summary>
        /// Parent UsuarioLogin pointed by [Direccion].([IdUsuario]) (FK_Direccion_Usuario)
        /// </summary>
        public UsuarioLogin UsuarioLogin { get; set; } // FK_Direccion_Usuario
    }

    // Divisa
    public class Divisa
    {
        public int IdDivisa { get; set; } // IdDivisa (Primary key)
        public string Nombre { get; set; } // Nombre (length: 50)
        public string Codigo { get; set; } // Codigo (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child Servicios where [Servicio].[CostoDivisa] point to this entity (FK_Servicio_Divisa)
        /// </summary>
        public ICollection<Servicio> Servicios { get; set; } // Servicio.FK_Servicio_Divisa

        /// <summary>
        /// Child UsuarioInformacions where [UsuarioInformacion].[SueldoDivisa] point to this entity (FK_UsuarioInformacion_Divisa)
        /// </summary>
        public ICollection<UsuarioInformacion> UsuarioInformacions { get; set; } // UsuarioInformacion.FK_UsuarioInformacion_Divisa

        public Divisa()
        {
            Servicios = new List<Servicio>();
            UsuarioInformacions = new List<UsuarioInformacion>();
        }
    }

    // Empresa
    public class Empresa
    {
        public int IdEmpresa { get; set; } // IdEmpresa (Primary key)
        public string Nombre { get; set; } // Nombre (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child UsuarioInformacions where [UsuarioInformacion].[IdEmpresa] point to this entity (FK_UsuarioInformacion_Empresa)
        /// </summary>
        public ICollection<UsuarioInformacion> UsuarioInformacions { get; set; } // UsuarioInformacion.FK_UsuarioInformacion_Empresa

        public Empresa()
        {
            UsuarioInformacions = new List<UsuarioInformacion>();
        }
    }

    // EstadoCivil
    public class EstadoCivil
    {
        public int IdEstadoCivil { get; set; } // IdEstadoCivil (Primary key)
        public string Descripcion { get; set; } // Descripcion (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child UsuarioInformacions where [UsuarioInformacion].[IdEstadoCivil] point to this entity (FK_UsuarioInformacion_EstadoCivil)
        /// </summary>
        public ICollection<UsuarioInformacion> UsuarioInformacions { get; set; } // UsuarioInformacion.FK_UsuarioInformacion_EstadoCivil

        public EstadoCivil()
        {
            UsuarioInformacions = new List<UsuarioInformacion>();
        }
    }

    // Inventario
    public class Inventario
    {
        public int IdInventario { get; set; } // IdInventario (Primary key)
        public string CodigoInterno { get; set; } // CodigoInterno (length: 50)
        public string Foto { get; set; } // Foto (length: 500)
        public string Nombre { get; set; } // Nombre (length: 100)
        public string Descripcion { get; set; } // Descripcion (length: 500)
        public int IdCategoria { get; set; } // IdCategoria
        public DateTime? FechaCompra { get; set; } // FechaCompra
        public decimal? Costo { get; set; } // Costo
        public string Proveedor { get; set; } // Proveedor (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child InventarioAsignacions where [InventarioAsignacion].[IdInventario] point to this entity (FK_InventarioAsignacion_Inventario)
        /// </summary>
        public ICollection<InventarioAsignacion> InventarioAsignacions { get; set; } // InventarioAsignacion.FK_InventarioAsignacion_Inventario

        /// <summary>
        /// Parent (One-to-One) Inventario pointed by [InventarioGeneral].[IdInventario] (FK_InventarioGeneral_Inventario)
        /// </summary>
        public InventarioGeneral InventarioGeneral { get; set; } // InventarioGeneral.FK_InventarioGeneral_Inventario

        /// <summary>
        /// Parent (One-to-One) Inventario pointed by [InventarioLibro].[IdInventario] (FK_InventarioLibro_Inventario)
        /// </summary>
        public InventarioLibro InventarioLibro { get; set; } // InventarioLibro.FK_InventarioLibro_Inventario

        // Foreign keys

        /// <summary>
        /// Parent InventarioCategoria pointed by [Inventario].([IdCategoria]) (FK_Inventario_Categoria)
        /// </summary>
        public InventarioCategoria InventarioCategoria { get; set; } // FK_Inventario_Categoria

        public Inventario()
        {
            InventarioAsignacions = new List<InventarioAsignacion>();
        }
    }

    // InventarioAsignacion
    public class InventarioAsignacion
    {
        public int IdInventario { get; set; } // IdInventario (Primary key)
        public int IdUsuario { get; set; } // IdUsuario (Primary key)
        public DateTime FechaEntrega { get; set; } // FechaEntrega
        public DateTime? FechaDevolucion { get; set; } // FechaDevolucion
        public string Nota { get; set; } // Nota (length: 500)

        // Foreign keys

        /// <summary>
        /// Parent Inventario pointed by [InventarioAsignacion].([IdInventario]) (FK_InventarioAsignacion_Inventario)
        /// </summary>
        public Inventario Inventario { get; set; } // FK_InventarioAsignacion_Inventario

        /// <summary>
        /// Parent UsuarioLogin pointed by [InventarioAsignacion].([IdUsuario]) (FK_InventarioAsignacion_Usuario)
        /// </summary>
        public UsuarioLogin UsuarioLogin { get; set; } // FK_InventarioAsignacion_Usuario
    }

    // InventarioCategoria
    public class InventarioCategoria
    {
        public int IdCategoria { get; set; } // IdCategoria (Primary key)
        public string Nombre { get; set; } // Nombre (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Inventarios where [Inventario].[IdCategoria] point to this entity (FK_Inventario_Categoria)
        /// </summary>
        public ICollection<Inventario> Inventarios { get; set; } // Inventario.FK_Inventario_Categoria

        public InventarioCategoria()
        {
            Inventarios = new List<Inventario>();
        }
    }

    // InventarioGeneral
    public class InventarioGeneral
    {
        public int IdInventario { get; set; } // IdInventario (Primary key)
        public string Marca { get; set; } // Marca (length: 50)
        public string Modelo { get; set; } // Modelo (length: 50)
        public string NumeroSerie { get; set; } // NumeroSerie (length: 50)
        public string EstadoCondicion { get; set; } // EstadoCondicion (length: 50)
        public DateTime? GarantiaFechaFin { get; set; } // GarantiaFechaFin

        // Foreign keys

        /// <summary>
        /// Parent Inventario pointed by [InventarioGeneral].([IdInventario]) (FK_InventarioGeneral_Inventario)
        /// </summary>
        public Inventario Inventario { get; set; } // FK_InventarioGeneral_Inventario
    }

    // InventarioLibro
    public class InventarioLibro
    {
        public int IdInventario { get; set; } // IdInventario (Primary key)
        public string Autor { get; set; } // Autor (length: 100)
        public string Reseña { get; set; } // Reseña (length: 500)
        public string Editorial { get; set; } // Editorial (length: 100)
        public string Isbn { get; set; } // ISBN (length: 20)
        public bool EsDigital { get; set; } // EsDigital

        // Foreign keys

        /// <summary>
        /// Parent Inventario pointed by [InventarioLibro].([IdInventario]) (FK_InventarioLibro_Inventario)
        /// </summary>
        public Inventario Inventario { get; set; } // FK_InventarioLibro_Inventario
    }

    // NivelEstudio
    public class NivelEstudio
    {
        public int IdNivelEstudio { get; set; } // IdNivelEstudio (Primary key)
        public string Descripcion { get; set; } // Descripcion (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child UsuarioInformacions where [UsuarioInformacion].[IdNivelEstudio] point to this entity (FK_UsuarioInformacion_NivelEstudio)
        /// </summary>
        public ICollection<UsuarioInformacion> UsuarioInformacions { get; set; } // UsuarioInformacion.FK_UsuarioInformacion_NivelEstudio

        public NivelEstudio()
        {
            UsuarioInformacions = new List<UsuarioInformacion>();
        }
    }

    // Pais
    public class Pai
    {
        public int IdPais { get; set; } // IdPais (Primary key)
        public string Nombre { get; set; } // Nombre (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child UsuarioInformacions where [UsuarioInformacion].[IdPais] point to this entity (FK_UsuarioInformacion_Pais)
        /// </summary>
        public ICollection<UsuarioInformacion> UsuarioInformacions { get; set; } // UsuarioInformacion.FK_UsuarioInformacion_Pais

        public Pai()
        {
            UsuarioInformacions = new List<UsuarioInformacion>();
        }
    }

    // Pronombre
    public class Pronombre
    {
        public int IdPronombre { get; set; } // IdPronombre (Primary key)
        public string Descripcion { get; set; } // Descripcion (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child UsuarioInformacions where [UsuarioInformacion].[IdPronombre] point to this entity (FK_UsuarioInformacion_Pronombre)
        /// </summary>
        public ICollection<UsuarioInformacion> UsuarioInformacions { get; set; } // UsuarioInformacion.FK_UsuarioInformacion_Pronombre

        public Pronombre()
        {
            UsuarioInformacions = new List<UsuarioInformacion>();
        }
    }

    // Servicio
    public class Servicio
    {
        public int IdServicio { get; set; } // IdServicio (Primary key)
        public string Nombre { get; set; } // Nombre (length: 100)
        public decimal Costo { get; set; } // Costo
        public int CostoDivisa { get; set; } // CostoDivisa
        public string CostoFrecuencia { get; set; } // CostoFrecuencia (length: 50)
        public string MetodoPago { get; set; } // MetodoPago (length: 100)
        public DateTime? FechaAdquisicion { get; set; } // FechaAdquisicion
        public string CuentaRegistrada { get; set; } // CuentaRegistrada (length: 256)
        public string Contrasena { get; set; } // Contrasena (length: 50)
        public DateTime? UltimaModificacionContrasena { get; set; } // UltimaModificacionContrasena
        public string Url { get; set; } // URL (length: 500)
        public string Notas { get; set; } // Notas (length: 1000)

        // Reverse navigation

        /// <summary>
        /// Child ServicioUsuarios where [ServicioUsuario].[IdServicio] point to this entity (FK_ServicioUsuario_Servicio)
        /// </summary>
        public ICollection<ServicioUsuario> ServicioUsuarios { get; set; } // ServicioUsuario.FK_ServicioUsuario_Servicio

        // Foreign keys

        /// <summary>
        /// Parent Divisa pointed by [Servicio].([CostoDivisa]) (FK_Servicio_Divisa)
        /// </summary>
        public Divisa Divisa { get; set; } // FK_Servicio_Divisa

        public Servicio()
        {
            ServicioUsuarios = new List<ServicioUsuario>();
        }
    }

    // ServicioUsuario
    public class ServicioUsuario
    {
        public int IdServicio { get; set; } // IdServicio (Primary key)
        public int IdUsuario { get; set; } // IdUsuario (Primary key)
        public DateTime FechaAsignacion { get; set; } // FechaAsignacion

        // Foreign keys

        /// <summary>
        /// Parent Servicio pointed by [ServicioUsuario].([IdServicio]) (FK_ServicioUsuario_Servicio)
        /// </summary>
        public Servicio Servicio { get; set; } // FK_ServicioUsuario_Servicio

        /// <summary>
        /// Parent UsuarioLogin pointed by [ServicioUsuario].([IdUsuario]) (FK_ServicioUsuario_Usuario)
        /// </summary>
        public UsuarioLogin UsuarioLogin { get; set; } // FK_ServicioUsuario_Usuario
    }

    // SolicitudVacaciones
    public class SolicitudVacacione
    {
        public int IdSolicitud { get; set; } // IdSolicitud (Primary key)
        public int IdEmpleado { get; set; } // IdEmpleado
        public DateTime FechaSolicitud { get; set; } // FechaSolicitud
        public int DerechoDiasEmpleado { get; set; } // DerechoDiasEmpleado
        public int? IdUsuarioRh { get; set; } // IdUsuarioRH
        public int IdEstatus { get; set; } // IdEstatus
        public string SustitutoNombre { get; set; } // SustitutoNombre (length: 100)
        public string SustitutoTelefono { get; set; } // SustitutoTelefono (length: 20)

        // Reverse navigation

        /// <summary>
        /// Child SolicitudVacacionesDias where [SolicitudVacacionesDias].[IdSolicitud] point to this entity (FK_SolicitudVacacionesDias_Solicitud)
        /// </summary>
        public ICollection<SolicitudVacacionesDia> SolicitudVacacionesDias { get; set; } // SolicitudVacacionesDias.FK_SolicitudVacacionesDias_Solicitud

        // Foreign keys

        /// <summary>
        /// Parent SolicitudVacacionesEstatu pointed by [SolicitudVacaciones].([IdEstatus]) (FK_SolicitudVacaciones_Estatus)
        /// </summary>
        public SolicitudVacacionesEstatu SolicitudVacacionesEstatu { get; set; } // FK_SolicitudVacaciones_Estatus

        /// <summary>
        /// Parent UsuarioLogin pointed by [SolicitudVacaciones].([IdEmpleado]) (FK_SolicitudVacaciones_Empleado)
        /// </summary>
        public UsuarioLogin UsuarioLogin_IdEmpleado { get; set; } // FK_SolicitudVacaciones_Empleado

        /// <summary>
        /// Parent UsuarioLogin pointed by [SolicitudVacaciones].([IdUsuarioRh]) (FK_SolicitudVacaciones_UsuarioRH)
        /// </summary>
        public UsuarioLogin UsuarioLogin_IdUsuarioRh { get; set; } // FK_SolicitudVacaciones_UsuarioRH

        public SolicitudVacacione()
        {
            SolicitudVacacionesDias = new List<SolicitudVacacionesDia>();
        }
    }

    // SolicitudVacacionesDias
    public class SolicitudVacacionesDia
    {
        public int IdSolicitud { get; set; } // IdSolicitud (Primary key)
        public DateTime Fecha { get; set; } // Fecha (Primary key)

        // Foreign keys

        /// <summary>
        /// Parent SolicitudVacacione pointed by [SolicitudVacacionesDias].([IdSolicitud]) (FK_SolicitudVacacionesDias_Solicitud)
        /// </summary>
        public SolicitudVacacione SolicitudVacacione { get; set; } // FK_SolicitudVacacionesDias_Solicitud
    }

    // SolicitudVacacionesEstatus
    public class SolicitudVacacionesEstatu
    {
        public int IdEstatus { get; set; } // IdEstatus (Primary key)
        public string Descripcion { get; set; } // Descripcion (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child SolicitudVacaciones where [SolicitudVacaciones].[IdEstatus] point to this entity (FK_SolicitudVacaciones_Estatus)
        /// </summary>
        public ICollection<SolicitudVacacione> SolicitudVacaciones { get; set; } // SolicitudVacaciones.FK_SolicitudVacaciones_Estatus

        public SolicitudVacacionesEstatu()
        {
            SolicitudVacaciones = new List<SolicitudVacacione>();
        }
    }

    // TallaPlayera
    public class TallaPlayera
    {
        public int IdTallaPlayera { get; set; } // IdTallaPlayera (Primary key)
        public string Talla { get; set; } // Talla (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child UsuarioInformacions where [UsuarioInformacion].[IdTallaPlayera] point to this entity (FK_UsuarioInformacion_TallaPlayera)
        /// </summary>
        public ICollection<UsuarioInformacion> UsuarioInformacions { get; set; } // UsuarioInformacion.FK_UsuarioInformacion_TallaPlayera

        public TallaPlayera()
        {
            UsuarioInformacions = new List<UsuarioInformacion>();
        }
    }

    // TipoContrato
    public class TipoContrato
    {
        public int IdTipoContrato { get; set; } // IdTipoContrato (Primary key)
        public string Descripcion { get; set; } // Descripcion (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child UsuarioInformacions where [UsuarioInformacion].[IdTipoContrato] point to this entity (FK_UsuarioInformacion_TipoContrato)
        /// </summary>
        public ICollection<UsuarioInformacion> UsuarioInformacions { get; set; } // UsuarioInformacion.FK_UsuarioInformacion_TipoContrato

        public TipoContrato()
        {
            UsuarioInformacions = new List<UsuarioInformacion>();
        }
    }

    // UsuarioInformacion
    public class UsuarioInformacion
    {
        public int IdUsuarioLogin { get; set; } // IdUsuarioLogin (Primary key)
        public int? IdPronombre { get; set; } // IdPronombre
        public int IdEstadoCivil { get; set; } // IdEstadoCivil
        public int IdPais { get; set; } // IdPais
        public DateTime FechaNacimiento { get; set; } // FechaNacimiento
        public string Telefono { get; set; } // Telefono (length: 20)
        public int? IdTallaPlayera { get; set; } // IdTallaPlayera
        public int IdNivelEstudio { get; set; } // IdNivelEstudio
        public string CedulaProfesional { get; set; } // CedulaProfesional (length: 50)
        public string CurriculumVitaeUrl { get; set; } // CurriculumVitaeUrl (length: 500)
        public string ActaNacimientoUrl { get; set; } // ActaNacimientoUrl (length: 500)
        public string Banco { get; set; } // Banco (length: 50)
        public string BancoClabe { get; set; } // BancoCLABE (length: 50)
        public string NumeroSeguroSocial { get; set; } // NumeroSeguroSocial (length: 50)
        public string Rfc { get; set; } // RFC (length: 50)
        public string Curp { get; set; } // CURP (length: 50)
        public string IdentificadorNacional { get; set; } // IdentificadorNacional (length: 50)
        public string NumeroColaborador { get; set; } // NumeroColaborador (length: 50)
        public int IdTipoContrato { get; set; } // IdTipoContrato
        public string Puesto { get; set; } // Puesto (length: 50)
        public int IdEmpresa { get; set; } // IdEmpresa
        public int IdDepartamento { get; set; } // IdDepartamento
        public int? IdSupervisor { get; set; } // IdSupervisor
        public DateTime FechaIngreso { get; set; } // FechaIngreso
        public DateTime? FechaIngresoAsalariado { get; set; } // FechaIngresoAsalariado
        public DateTime? FechaFinContrato { get; set; } // FechaFinContrato
        public int? DuracionJornada { get; set; } // DuracionJornada
        public int Sueldo { get; set; } // Sueldo
        public int SueldoDivisa { get; set; } // SueldoDivisa
        public string Notas { get; set; } // Notas
        public int DiasDisponiblesVacaciones { get; set; } // DiasDisponiblesVacaciones

        // Foreign keys

        /// <summary>
        /// Parent Departamento pointed by [UsuarioInformacion].([IdDepartamento]) (FK_UsuarioInformacion_Departamento)
        /// </summary>
        public Departamento Departamento { get; set; } // FK_UsuarioInformacion_Departamento

        /// <summary>
        /// Parent Divisa pointed by [UsuarioInformacion].([SueldoDivisa]) (FK_UsuarioInformacion_Divisa)
        /// </summary>
        public Divisa Divisa { get; set; } // FK_UsuarioInformacion_Divisa

        /// <summary>
        /// Parent Empresa pointed by [UsuarioInformacion].([IdEmpresa]) (FK_UsuarioInformacion_Empresa)
        /// </summary>
        public Empresa Empresa { get; set; } // FK_UsuarioInformacion_Empresa

        /// <summary>
        /// Parent EstadoCivil pointed by [UsuarioInformacion].([IdEstadoCivil]) (FK_UsuarioInformacion_EstadoCivil)
        /// </summary>
        public EstadoCivil EstadoCivil { get; set; } // FK_UsuarioInformacion_EstadoCivil

        /// <summary>
        /// Parent NivelEstudio pointed by [UsuarioInformacion].([IdNivelEstudio]) (FK_UsuarioInformacion_NivelEstudio)
        /// </summary>
        public NivelEstudio NivelEstudio { get; set; } // FK_UsuarioInformacion_NivelEstudio

        /// <summary>
        /// Parent Pai pointed by [UsuarioInformacion].([IdPais]) (FK_UsuarioInformacion_Pais)
        /// </summary>
        public Pai Pai { get; set; } // FK_UsuarioInformacion_Pais

        /// <summary>
        /// Parent Pronombre pointed by [UsuarioInformacion].([IdPronombre]) (FK_UsuarioInformacion_Pronombre)
        /// </summary>
        public Pronombre Pronombre { get; set; } // FK_UsuarioInformacion_Pronombre

        /// <summary>
        /// Parent TallaPlayera pointed by [UsuarioInformacion].([IdTallaPlayera]) (FK_UsuarioInformacion_TallaPlayera)
        /// </summary>
        public TallaPlayera TallaPlayera { get; set; } // FK_UsuarioInformacion_TallaPlayera

        /// <summary>
        /// Parent TipoContrato pointed by [UsuarioInformacion].([IdTipoContrato]) (FK_UsuarioInformacion_TipoContrato)
        /// </summary>
        public TipoContrato TipoContrato { get; set; } // FK_UsuarioInformacion_TipoContrato

        /// <summary>
        /// Parent UsuarioLogin pointed by [UsuarioInformacion].([IdSupervisor]) (FK_UsuarioInformacion_Supervisor)
        /// </summary>
        public UsuarioLogin UsuarioLogin_IdSupervisor { get; set; } // FK_UsuarioInformacion_Supervisor

        /// <summary>
        /// Parent UsuarioLogin pointed by [UsuarioInformacion].([IdUsuarioLogin]) (FK_UsuarioInformacion_UsuarioLogin)
        /// </summary>
        public UsuarioLogin UsuarioLogin_IdUsuarioLogin { get; set; } // FK_UsuarioInformacion_UsuarioLogin

        public UsuarioInformacion()
        {
            DiasDisponiblesVacaciones = 12;
        }
    }

    // UsuarioLogin
    public class UsuarioLogin
    {
        public int IdUsuarioLogin { get; set; } // IdUsuarioLogin (Primary key)
        public string UserName { get; set; } // UserName (length: 256)
        public string Email { get; set; } // Email (length: 256)
        public string NombreCompleto { get; set; } // NombreCompleto (length: 100)
        public string FotografiaUrl { get; set; } // FotografiaUrl (length: 500)
        public bool EstaActivo { get; set; } // EstaActivo

        // Reverse navigation

        /// <summary>
        /// Child Ausencias where [Ausencia].[IdUsuario] point to this entity (FK_Ausencia_Usuario)
        /// </summary>
        public ICollection<Ausencia> Ausencias { get; set; } // Ausencia.FK_Ausencia_Usuario

        /// <summary>
        /// Child BeneficioUsuarios where [BeneficioUsuario].[IdUsuarioInformacion] point to this entity (FK_BeneficioUsuario_Usuario)
        /// </summary>
        public ICollection<BeneficioUsuario> BeneficioUsuarios { get; set; } // BeneficioUsuario.FK_BeneficioUsuario_Usuario

        /// <summary>
        /// Child CapacitacionUsuarios where [CapacitacionUsuario].[IdUsuario] point to this entity (FK_CapacitacionUsuario_Usuario)
        /// </summary>
        public ICollection<CapacitacionUsuario> CapacitacionUsuarios { get; set; } // CapacitacionUsuario.FK_CapacitacionUsuario_Usuario

        /// <summary>
        /// Child Direccions where [Direccion].[IdUsuario] point to this entity (FK_Direccion_Usuario)
        /// </summary>
        public ICollection<Direccion> Direccions { get; set; } // Direccion.FK_Direccion_Usuario

        /// <summary>
        /// Child InventarioAsignacions where [InventarioAsignacion].[IdUsuario] point to this entity (FK_InventarioAsignacion_Usuario)
        /// </summary>
        public ICollection<InventarioAsignacion> InventarioAsignacions { get; set; } // InventarioAsignacion.FK_InventarioAsignacion_Usuario

        /// <summary>
        /// Child ServicioUsuarios where [ServicioUsuario].[IdUsuario] point to this entity (FK_ServicioUsuario_Usuario)
        /// </summary>
        public ICollection<ServicioUsuario> ServicioUsuarios { get; set; } // ServicioUsuario.FK_ServicioUsuario_Usuario

        /// <summary>
        /// Child SolicitudVacaciones where [SolicitudVacaciones].[IdEmpleado] point to this entity (FK_SolicitudVacaciones_Empleado)
        /// </summary>
        public ICollection<SolicitudVacacione> SolicitudVacaciones_IdEmpleado { get; set; } // SolicitudVacaciones.FK_SolicitudVacaciones_Empleado

        /// <summary>
        /// Child SolicitudVacaciones where [SolicitudVacaciones].[IdUsuarioRH] point to this entity (FK_SolicitudVacaciones_UsuarioRH)
        /// </summary>
        public ICollection<SolicitudVacacione> SolicitudVacaciones_IdUsuarioRh { get; set; } // SolicitudVacaciones.FK_SolicitudVacaciones_UsuarioRH

        /// <summary>
        /// Child UsuarioInformacions where [UsuarioInformacion].[IdSupervisor] point to this entity (FK_UsuarioInformacion_Supervisor)
        /// </summary>
        public ICollection<UsuarioInformacion> UsuarioInformacions { get; set; } // UsuarioInformacion.FK_UsuarioInformacion_Supervisor

        /// <summary>
        /// Parent (One-to-One) UsuarioLogin pointed by [UsuarioInformacion].[IdUsuarioLogin] (FK_UsuarioInformacion_UsuarioLogin)
        /// </summary>
        public UsuarioInformacion UsuarioInformacion { get; set; } // UsuarioInformacion.FK_UsuarioInformacion_UsuarioLogin

        public UsuarioLogin()
        {
            EstaActivo = true;
            Ausencias = new List<Ausencia>();
            BeneficioUsuarios = new List<BeneficioUsuario>();
            CapacitacionUsuarios = new List<CapacitacionUsuario>();
            Direccions = new List<Direccion>();
            InventarioAsignacions = new List<InventarioAsignacion>();
            ServicioUsuarios = new List<ServicioUsuario>();
            SolicitudVacaciones_IdEmpleado = new List<SolicitudVacacione>();
            SolicitudVacaciones_IdUsuarioRh = new List<SolicitudVacacione>();
            UsuarioInformacions = new List<UsuarioInformacion>();
        }
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Ausencia
    public class AusenciaConfiguration : IEntityTypeConfiguration<Ausencia>
    {
        public void Configure(EntityTypeBuilder<Ausencia> builder)
        {
            builder.ToTable("Ausencia", "dbo");
            builder.HasKey(x => x.IdAusencia).HasName("PK__Ausencia__0B5BA4140848C245").IsClustered();

            builder.Property(x => x.IdAusencia).HasColumnName(@"IdAusencia").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IdUsuario).HasColumnName(@"IdUsuario").HasColumnType("int").IsRequired();
            builder.Property(x => x.FechaInicio).HasColumnName(@"FechaInicio").HasColumnType("date").IsRequired();
            builder.Property(x => x.FechaFin).HasColumnName(@"FechaFin").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.MotivoAusencia).HasColumnName(@"MotivoAusencia").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);

            // Foreign keys
            builder.HasOne(a => a.UsuarioLogin).WithMany(b => b.Ausencias).HasForeignKey(c => c.IdUsuario).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Ausencia_Usuario");
        }
    }

    // Beneficio
    public class BeneficioConfiguration : IEntityTypeConfiguration<Beneficio>
    {
        public void Configure(EntityTypeBuilder<Beneficio> builder)
        {
            builder.ToTable("Beneficio", "dbo");
            builder.HasKey(x => x.IdBeneficio).HasName("PK__Benefici__14B7CA0C1D118B54").IsClustered();

            builder.Property(x => x.IdBeneficio).HasColumnName(@"IdBeneficio").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Descripcion).HasColumnName(@"Descripcion").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);

            builder.HasIndex(x => x.Nombre).HasDatabaseName("UQ__Benefici__75E3EFCF5716E1CD").IsUnique();
        }
    }

    // BeneficioUsuario
    public class BeneficioUsuarioConfiguration : IEntityTypeConfiguration<BeneficioUsuario>
    {
        public void Configure(EntityTypeBuilder<BeneficioUsuario> builder)
        {
            builder.ToTable("BeneficioUsuario", "dbo");
            builder.HasKey(x => new { x.IdUsuarioInformacion, x.IdBeneficio }).HasName("PK__Benefici__94AE11924D7993CA").IsClustered();

            builder.Property(x => x.IdUsuarioInformacion).HasColumnName(@"IdUsuarioInformacion").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.IdBeneficio).HasColumnName(@"IdBeneficio").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.EstaAsignado).HasColumnName(@"EstaAsignado").HasColumnType("bit").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Beneficio).WithMany(b => b.BeneficioUsuarios).HasForeignKey(c => c.IdBeneficio).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BeneficioUsuario_Beneficio");
            builder.HasOne(a => a.UsuarioLogin).WithMany(b => b.BeneficioUsuarios).HasForeignKey(c => c.IdUsuarioInformacion).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_BeneficioUsuario_Usuario");
        }
    }

    // CapacitacionTipo
    public class CapacitacionTipoConfiguration : IEntityTypeConfiguration<CapacitacionTipo>
    {
        public void Configure(EntityTypeBuilder<CapacitacionTipo> builder)
        {
            builder.ToTable("CapacitacionTipo", "dbo");
            builder.HasKey(x => x.IdCapacitacionTipo).HasName("PK__Capacita__46690681113D0F7B").IsClustered();

            builder.Property(x => x.IdCapacitacionTipo).HasColumnName(@"IdCapacitacionTipo").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Descripcion).HasColumnName(@"Descripcion").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);

            builder.HasIndex(x => x.Descripcion).HasDatabaseName("UQ__Capacita__92C53B6C023DF2D4").IsUnique();
        }
    }

    // CapacitacionUsuario
    public class CapacitacionUsuarioConfiguration : IEntityTypeConfiguration<CapacitacionUsuario>
    {
        public void Configure(EntityTypeBuilder<CapacitacionUsuario> builder)
        {
            builder.ToTable("CapacitacionUsuario", "dbo");
            builder.HasKey(x => x.IdCapacitacion).HasName("PK__Capacita__B3A1D353BA92BC63").IsClustered();

            builder.Property(x => x.IdCapacitacion).HasColumnName(@"IdCapacitacion").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IdUsuario).HasColumnName(@"IdUsuario").HasColumnType("int").IsRequired();
            builder.Property(x => x.IdCapacitacionTipo).HasColumnName(@"IdCapacitacionTipo").HasColumnType("int").IsRequired();
            builder.Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.CapacitacionTipo).WithMany(b => b.CapacitacionUsuarios).HasForeignKey(c => c.IdCapacitacionTipo).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CapacitacionUsuario_CapacitacionTipo");
            builder.HasOne(a => a.UsuarioLogin).WithMany(b => b.CapacitacionUsuarios).HasForeignKey(c => c.IdUsuario).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CapacitacionUsuario_Usuario");
        }
    }

    // Departamento
    public class DepartamentoConfiguration : IEntityTypeConfiguration<Departamento>
    {
        public void Configure(EntityTypeBuilder<Departamento> builder)
        {
            builder.ToTable("Departamento", "dbo");
            builder.HasKey(x => x.IdDepartamento).HasName("PK__Departam__787A433D36EBF1C2").IsClustered();

            builder.Property(x => x.IdDepartamento).HasColumnName(@"IdDepartamento").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);

            builder.HasIndex(x => x.Nombre).HasDatabaseName("UQ__Departam__75E3EFCF06D554EB").IsUnique();
        }
    }

    // Direccion
    public class DireccionConfiguration : IEntityTypeConfiguration<Direccion>
    {
        public void Configure(EntityTypeBuilder<Direccion> builder)
        {
            builder.ToTable("Direccion", "dbo");
            builder.HasKey(x => x.IdDireccion).HasName("PK__Direccio__1F8E0C76D3DAB651").IsClustered();

            builder.Property(x => x.IdDireccion).HasColumnName(@"IdDireccion").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IdUsuario).HasColumnName(@"IdUsuario").HasColumnType("int").IsRequired();
            builder.Property(x => x.Direccion_).HasColumnName(@"Direccion").HasColumnType("nvarchar(500)").IsRequired().HasMaxLength(500);
            builder.Property(x => x.Latitud).HasColumnName(@"Latitud").HasColumnType("decimal(9,6)").HasPrecision(9,6).IsRequired(false);
            builder.Property(x => x.Longitud).HasColumnName(@"Longitud").HasColumnType("decimal(9,6)").HasPrecision(9,6).IsRequired(false);
            builder.Property(x => x.GoogleMapsUrl).HasColumnName(@"GoogleMapsUrl").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.ComprobanteDomicilioUrl).HasColumnName(@"ComprobanteDomicilioUrl").HasColumnType("nvarchar(500)").IsRequired().HasMaxLength(500);

            // Foreign keys
            builder.HasOne(a => a.UsuarioLogin).WithMany(b => b.Direccions).HasForeignKey(c => c.IdUsuario).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Direccion_Usuario");
        }
    }

    // Divisa
    public class DivisaConfiguration : IEntityTypeConfiguration<Divisa>
    {
        public void Configure(EntityTypeBuilder<Divisa> builder)
        {
            builder.ToTable("Divisa", "dbo");
            builder.HasKey(x => x.IdDivisa).HasName("PK__Divisa__DA960DCBE9A209AB").IsClustered();

            builder.Property(x => x.IdDivisa).HasColumnName(@"IdDivisa").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Codigo).HasColumnName(@"Codigo").HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10);

            builder.HasIndex(x => x.Codigo).HasDatabaseName("UQ__Divisa__06370DAC55DB37EE").IsUnique();
            builder.HasIndex(x => x.Nombre).HasDatabaseName("UQ__Divisa__75E3EFCF154D5815").IsUnique();
        }
    }

    // Empresa
    public class EmpresaConfiguration : IEntityTypeConfiguration<Empresa>
    {
        public void Configure(EntityTypeBuilder<Empresa> builder)
        {
            builder.ToTable("Empresa", "dbo");
            builder.HasKey(x => x.IdEmpresa).HasName("PK__Empresa__5EF4033E05E4F6AB").IsClustered();

            builder.Property(x => x.IdEmpresa).HasColumnName(@"IdEmpresa").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);

            builder.HasIndex(x => x.Nombre).HasDatabaseName("UQ__Empresa__75E3EFCF5E153627").IsUnique();
        }
    }

    // EstadoCivil
    public class EstadoCivilConfiguration : IEntityTypeConfiguration<EstadoCivil>
    {
        public void Configure(EntityTypeBuilder<EstadoCivil> builder)
        {
            builder.ToTable("EstadoCivil", "dbo");
            builder.HasKey(x => x.IdEstadoCivil).HasName("PK__EstadoCi__889DE1B295F28A79").IsClustered();

            builder.Property(x => x.IdEstadoCivil).HasColumnName(@"IdEstadoCivil").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Descripcion).HasColumnName(@"Descripcion").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);

            builder.HasIndex(x => x.Descripcion).HasDatabaseName("UQ__EstadoCi__92C53B6CAC8C98BB").IsUnique();
        }
    }

    // Inventario
    public class InventarioConfiguration : IEntityTypeConfiguration<Inventario>
    {
        public void Configure(EntityTypeBuilder<Inventario> builder)
        {
            builder.ToTable("Inventario", "dbo");
            builder.HasKey(x => x.IdInventario).HasName("PK__Inventar__1927B20C818BEB6A").IsClustered();

            builder.Property(x => x.IdInventario).HasColumnName(@"IdInventario").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CodigoInterno).HasColumnName(@"CodigoInterno").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Foto).HasColumnName(@"Foto").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.Descripcion).HasColumnName(@"Descripcion").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.IdCategoria).HasColumnName(@"IdCategoria").HasColumnType("int").IsRequired();
            builder.Property(x => x.FechaCompra).HasColumnName(@"FechaCompra").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.Costo).HasColumnName(@"Costo").HasColumnType("decimal(10,2)").HasPrecision(10,2).IsRequired(false);
            builder.Property(x => x.Proveedor).HasColumnName(@"Proveedor").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);

            // Foreign keys
            builder.HasOne(a => a.InventarioCategoria).WithMany(b => b.Inventarios).HasForeignKey(c => c.IdCategoria).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Inventario_Categoria");

            builder.HasIndex(x => x.CodigoInterno).HasDatabaseName("UQ__Inventar__28C92875BD551D87").IsUnique();
        }
    }

    // InventarioAsignacion
    public class InventarioAsignacionConfiguration : IEntityTypeConfiguration<InventarioAsignacion>
    {
        public void Configure(EntityTypeBuilder<InventarioAsignacion> builder)
        {
            builder.ToTable("InventarioAsignacion", "dbo");
            builder.HasKey(x => new { x.IdInventario, x.IdUsuario }).HasName("PK__Inventar__7C91E9F51745367F").IsClustered();

            builder.Property(x => x.IdInventario).HasColumnName(@"IdInventario").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.IdUsuario).HasColumnName(@"IdUsuario").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.FechaEntrega).HasColumnName(@"FechaEntrega").HasColumnType("date").IsRequired();
            builder.Property(x => x.FechaDevolucion).HasColumnName(@"FechaDevolucion").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.Nota).HasColumnName(@"Nota").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);

            // Foreign keys
            builder.HasOne(a => a.Inventario).WithMany(b => b.InventarioAsignacions).HasForeignKey(c => c.IdInventario).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_InventarioAsignacion_Inventario");
            builder.HasOne(a => a.UsuarioLogin).WithMany(b => b.InventarioAsignacions).HasForeignKey(c => c.IdUsuario).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_InventarioAsignacion_Usuario");
        }
    }

    // InventarioCategoria
    public class InventarioCategoriaConfiguration : IEntityTypeConfiguration<InventarioCategoria>
    {
        public void Configure(EntityTypeBuilder<InventarioCategoria> builder)
        {
            builder.ToTable("InventarioCategoria", "dbo");
            builder.HasKey(x => x.IdCategoria).HasName("PK__Inventar__A3C02A10AD3B8676").IsClustered();

            builder.Property(x => x.IdCategoria).HasColumnName(@"IdCategoria").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);

            builder.HasIndex(x => x.Nombre).HasDatabaseName("UQ__Inventar__75E3EFCF85CBA72C").IsUnique();
        }
    }

    // InventarioGeneral
    public class InventarioGeneralConfiguration : IEntityTypeConfiguration<InventarioGeneral>
    {
        public void Configure(EntityTypeBuilder<InventarioGeneral> builder)
        {
            builder.ToTable("InventarioGeneral", "dbo");
            builder.HasKey(x => x.IdInventario).HasName("PK__Inventar__1927B20CB37CD388").IsClustered();

            builder.Property(x => x.IdInventario).HasColumnName(@"IdInventario").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Marca).HasColumnName(@"Marca").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Modelo).HasColumnName(@"Modelo").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.NumeroSerie).HasColumnName(@"NumeroSerie").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.EstadoCondicion).HasColumnName(@"EstadoCondicion").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.GarantiaFechaFin).HasColumnName(@"GarantiaFechaFin").HasColumnType("date").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Inventario).WithOne(b => b.InventarioGeneral).HasForeignKey<InventarioGeneral>(c => c.IdInventario).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_InventarioGeneral_Inventario");
        }
    }

    // InventarioLibro
    public class InventarioLibroConfiguration : IEntityTypeConfiguration<InventarioLibro>
    {
        public void Configure(EntityTypeBuilder<InventarioLibro> builder)
        {
            builder.ToTable("InventarioLibro", "dbo");
            builder.HasKey(x => x.IdInventario).HasName("PK__Inventar__1927B20C6FD6ACD2").IsClustered();

            builder.Property(x => x.IdInventario).HasColumnName(@"IdInventario").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Autor).HasColumnName(@"Autor").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Reseña).HasColumnName(@"Reseña").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.Editorial).HasColumnName(@"Editorial").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Isbn).HasColumnName(@"ISBN").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);
            builder.Property(x => x.EsDigital).HasColumnName(@"EsDigital").HasColumnType("bit").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Inventario).WithOne(b => b.InventarioLibro).HasForeignKey<InventarioLibro>(c => c.IdInventario).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_InventarioLibro_Inventario");
        }
    }

    // NivelEstudio
    public class NivelEstudioConfiguration : IEntityTypeConfiguration<NivelEstudio>
    {
        public void Configure(EntityTypeBuilder<NivelEstudio> builder)
        {
            builder.ToTable("NivelEstudio", "dbo");
            builder.HasKey(x => x.IdNivelEstudio).HasName("PK__NivelEst__FF408A03D08D14CA").IsClustered();

            builder.Property(x => x.IdNivelEstudio).HasColumnName(@"IdNivelEstudio").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Descripcion).HasColumnName(@"Descripcion").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);

            builder.HasIndex(x => x.Descripcion).HasDatabaseName("UQ__NivelEst__92C53B6CF5C34844").IsUnique();
        }
    }

    // Pais
    public class PaiConfiguration : IEntityTypeConfiguration<Pai>
    {
        public void Configure(EntityTypeBuilder<Pai> builder)
        {
            builder.ToTable("Pais", "dbo");
            builder.HasKey(x => x.IdPais).HasName("PK__Pais__FC850A7BE374204E").IsClustered();

            builder.Property(x => x.IdPais).HasColumnName(@"IdPais").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);

            builder.HasIndex(x => x.Nombre).HasDatabaseName("UQ__Pais__75E3EFCFE0C99BBD").IsUnique();
        }
    }

    // Pronombre
    public class PronombreConfiguration : IEntityTypeConfiguration<Pronombre>
    {
        public void Configure(EntityTypeBuilder<Pronombre> builder)
        {
            builder.ToTable("Pronombre", "dbo");
            builder.HasKey(x => x.IdPronombre).HasName("PK__Pronombr__36F24BB1DC4D5397").IsClustered();

            builder.Property(x => x.IdPronombre).HasColumnName(@"IdPronombre").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Descripcion).HasColumnName(@"Descripcion").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);

            builder.HasIndex(x => x.Descripcion).HasDatabaseName("UQ__Pronombr__92C53B6C782C7B05").IsUnique();
        }
    }

    // Servicio
    public class ServicioConfiguration : IEntityTypeConfiguration<Servicio>
    {
        public void Configure(EntityTypeBuilder<Servicio> builder)
        {
            builder.ToTable("Servicio", "dbo");
            builder.HasKey(x => x.IdServicio).HasName("PK__Servicio__2DCCF9A299E17E3D").IsClustered();

            builder.Property(x => x.IdServicio).HasColumnName(@"IdServicio").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.Costo).HasColumnName(@"Costo").HasColumnType("decimal(10,2)").HasPrecision(10,2).IsRequired();
            builder.Property(x => x.CostoDivisa).HasColumnName(@"CostoDivisa").HasColumnType("int").IsRequired();
            builder.Property(x => x.CostoFrecuencia).HasColumnName(@"CostoFrecuencia").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.MetodoPago).HasColumnName(@"MetodoPago").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.FechaAdquisicion).HasColumnName(@"FechaAdquisicion").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.CuentaRegistrada).HasColumnName(@"CuentaRegistrada").HasColumnType("nvarchar(256)").IsRequired(false).HasMaxLength(256);
            builder.Property(x => x.Contrasena).HasColumnName(@"Contrasena").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UltimaModificacionContrasena).HasColumnName(@"UltimaModificacionContrasena").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Url).HasColumnName(@"URL").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.Notas).HasColumnName(@"Notas").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);

            // Foreign keys
            builder.HasOne(a => a.Divisa).WithMany(b => b.Servicios).HasForeignKey(c => c.CostoDivisa).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Servicio_Divisa");
        }
    }

    // ServicioUsuario
    public class ServicioUsuarioConfiguration : IEntityTypeConfiguration<ServicioUsuario>
    {
        public void Configure(EntityTypeBuilder<ServicioUsuario> builder)
        {
            builder.ToTable("ServicioUsuario", "dbo");
            builder.HasKey(x => new { x.IdServicio, x.IdUsuario }).HasName("PK__Servicio__487AA25BF6517A1A").IsClustered();

            builder.Property(x => x.IdServicio).HasColumnName(@"IdServicio").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.IdUsuario).HasColumnName(@"IdUsuario").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.FechaAsignacion).HasColumnName(@"FechaAsignacion").HasColumnType("date").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Servicio).WithMany(b => b.ServicioUsuarios).HasForeignKey(c => c.IdServicio).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ServicioUsuario_Servicio");
            builder.HasOne(a => a.UsuarioLogin).WithMany(b => b.ServicioUsuarios).HasForeignKey(c => c.IdUsuario).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ServicioUsuario_Usuario");
        }
    }

    // SolicitudVacaciones
    public class SolicitudVacacioneConfiguration : IEntityTypeConfiguration<SolicitudVacacione>
    {
        public void Configure(EntityTypeBuilder<SolicitudVacacione> builder)
        {
            builder.ToTable("SolicitudVacaciones", "dbo");
            builder.HasKey(x => x.IdSolicitud).HasName("PK__Solicitu__36899CEF4410E6C2").IsClustered();

            builder.Property(x => x.IdSolicitud).HasColumnName(@"IdSolicitud").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.IdEmpleado).HasColumnName(@"IdEmpleado").HasColumnType("int").IsRequired();
            builder.Property(x => x.FechaSolicitud).HasColumnName(@"FechaSolicitud").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.DerechoDiasEmpleado).HasColumnName(@"DerechoDiasEmpleado").HasColumnType("int").IsRequired();
            builder.Property(x => x.IdUsuarioRh).HasColumnName(@"IdUsuarioRH").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IdEstatus).HasColumnName(@"IdEstatus").HasColumnType("int").IsRequired();
            builder.Property(x => x.SustitutoNombre).HasColumnName(@"SustitutoNombre").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.SustitutoTelefono).HasColumnName(@"SustitutoTelefono").HasColumnType("nvarchar(20)").IsRequired(false).HasMaxLength(20);

            // Foreign keys
            builder.HasOne(a => a.SolicitudVacacionesEstatu).WithMany(b => b.SolicitudVacaciones).HasForeignKey(c => c.IdEstatus).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SolicitudVacaciones_Estatus");
            builder.HasOne(a => a.UsuarioLogin_IdEmpleado).WithMany(b => b.SolicitudVacaciones_IdEmpleado).HasForeignKey(c => c.IdEmpleado).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SolicitudVacaciones_Empleado");
            builder.HasOne(a => a.UsuarioLogin_IdUsuarioRh).WithMany(b => b.SolicitudVacaciones_IdUsuarioRh).HasForeignKey(c => c.IdUsuarioRh).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SolicitudVacaciones_UsuarioRH");
        }
    }

    // SolicitudVacacionesDias
    public class SolicitudVacacionesDiaConfiguration : IEntityTypeConfiguration<SolicitudVacacionesDia>
    {
        public void Configure(EntityTypeBuilder<SolicitudVacacionesDia> builder)
        {
            builder.ToTable("SolicitudVacacionesDias", "dbo");
            builder.HasKey(x => new { x.IdSolicitud, x.Fecha }).HasName("PK__Solicitu__DDB9544A027BF603").IsClustered();

            builder.Property(x => x.IdSolicitud).HasColumnName(@"IdSolicitud").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Fecha).HasColumnName(@"Fecha").HasColumnType("date").IsRequired().ValueGeneratedNever();

            // Foreign keys
            builder.HasOne(a => a.SolicitudVacacione).WithMany(b => b.SolicitudVacacionesDias).HasForeignKey(c => c.IdSolicitud).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_SolicitudVacacionesDias_Solicitud");
        }
    }

    // SolicitudVacacionesEstatus
    public class SolicitudVacacionesEstatuConfiguration : IEntityTypeConfiguration<SolicitudVacacionesEstatu>
    {
        public void Configure(EntityTypeBuilder<SolicitudVacacionesEstatu> builder)
        {
            builder.ToTable("SolicitudVacacionesEstatus", "dbo");
            builder.HasKey(x => x.IdEstatus).HasName("PK__Solicitu__B32BA1C7F59265F2").IsClustered();

            builder.Property(x => x.IdEstatus).HasColumnName(@"IdEstatus").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Descripcion).HasColumnName(@"Descripcion").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);

            builder.HasIndex(x => x.Descripcion).HasDatabaseName("UQ__Solicitu__92C53B6C6C0B418B").IsUnique();
        }
    }

    // TallaPlayera
    public class TallaPlayeraConfiguration : IEntityTypeConfiguration<TallaPlayera>
    {
        public void Configure(EntityTypeBuilder<TallaPlayera> builder)
        {
            builder.ToTable("TallaPlayera", "dbo");
            builder.HasKey(x => x.IdTallaPlayera).HasName("PK__TallaPla__7F77601606E4CDD9").IsClustered();

            builder.Property(x => x.IdTallaPlayera).HasColumnName(@"IdTallaPlayera").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Talla).HasColumnName(@"Talla").HasColumnType("nvarchar(10)").IsRequired().HasMaxLength(10);

            builder.HasIndex(x => x.Talla).HasDatabaseName("UQ__TallaPla__69DA116124DB2005").IsUnique();
        }
    }

    // TipoContrato
    public class TipoContratoConfiguration : IEntityTypeConfiguration<TipoContrato>
    {
        public void Configure(EntityTypeBuilder<TipoContrato> builder)
        {
            builder.ToTable("TipoContrato", "dbo");
            builder.HasKey(x => x.IdTipoContrato).HasName("PK__TipoCont__F46C49C2E9581F4E").IsClustered();

            builder.Property(x => x.IdTipoContrato).HasColumnName(@"IdTipoContrato").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Descripcion).HasColumnName(@"Descripcion").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);

            builder.HasIndex(x => x.Descripcion).HasDatabaseName("UQ__TipoCont__92C53B6C0FE1466A").IsUnique();
        }
    }

    // UsuarioInformacion
    public class UsuarioInformacionConfiguration : IEntityTypeConfiguration<UsuarioInformacion>
    {
        public void Configure(EntityTypeBuilder<UsuarioInformacion> builder)
        {
            builder.ToTable("UsuarioInformacion", "dbo");
            builder.HasKey(x => x.IdUsuarioLogin).HasName("PK__UsuarioI__9E973030AF5A6385").IsClustered();

            builder.Property(x => x.IdUsuarioLogin).HasColumnName(@"IdUsuarioLogin").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.IdPronombre).HasColumnName(@"IdPronombre").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IdEstadoCivil).HasColumnName(@"IdEstadoCivil").HasColumnType("int").IsRequired();
            builder.Property(x => x.IdPais).HasColumnName(@"IdPais").HasColumnType("int").IsRequired();
            builder.Property(x => x.FechaNacimiento).HasColumnName(@"FechaNacimiento").HasColumnType("date").IsRequired();
            builder.Property(x => x.Telefono).HasColumnName(@"Telefono").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.IdTallaPlayera).HasColumnName(@"IdTallaPlayera").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.IdNivelEstudio).HasColumnName(@"IdNivelEstudio").HasColumnType("int").IsRequired();
            builder.Property(x => x.CedulaProfesional).HasColumnName(@"CedulaProfesional").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.CurriculumVitaeUrl).HasColumnName(@"CurriculumVitaeUrl").HasColumnType("nvarchar(500)").IsRequired().HasMaxLength(500);
            builder.Property(x => x.ActaNacimientoUrl).HasColumnName(@"ActaNacimientoUrl").HasColumnType("nvarchar(500)").IsRequired().HasMaxLength(500);
            builder.Property(x => x.Banco).HasColumnName(@"Banco").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.BancoClabe).HasColumnName(@"BancoCLABE").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.NumeroSeguroSocial).HasColumnName(@"NumeroSeguroSocial").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Rfc).HasColumnName(@"RFC").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Curp).HasColumnName(@"CURP").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.IdentificadorNacional).HasColumnName(@"IdentificadorNacional").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.NumeroColaborador).HasColumnName(@"NumeroColaborador").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.IdTipoContrato).HasColumnName(@"IdTipoContrato").HasColumnType("int").IsRequired();
            builder.Property(x => x.Puesto).HasColumnName(@"Puesto").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.IdEmpresa).HasColumnName(@"IdEmpresa").HasColumnType("int").IsRequired();
            builder.Property(x => x.IdDepartamento).HasColumnName(@"IdDepartamento").HasColumnType("int").IsRequired();
            builder.Property(x => x.IdSupervisor).HasColumnName(@"IdSupervisor").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FechaIngreso).HasColumnName(@"FechaIngreso").HasColumnType("date").IsRequired();
            builder.Property(x => x.FechaIngresoAsalariado).HasColumnName(@"FechaIngresoAsalariado").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.FechaFinContrato).HasColumnName(@"FechaFinContrato").HasColumnType("date").IsRequired(false);
            builder.Property(x => x.DuracionJornada).HasColumnName(@"DuracionJornada").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Sueldo).HasColumnName(@"Sueldo").HasColumnType("int").IsRequired();
            builder.Property(x => x.SueldoDivisa).HasColumnName(@"SueldoDivisa").HasColumnType("int").IsRequired();
            builder.Property(x => x.Notas).HasColumnName(@"Notas").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.DiasDisponiblesVacaciones).HasColumnName(@"DiasDisponiblesVacaciones").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Departamento).WithMany(b => b.UsuarioInformacions).HasForeignKey(c => c.IdDepartamento).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UsuarioInformacion_Departamento");
            builder.HasOne(a => a.Divisa).WithMany(b => b.UsuarioInformacions).HasForeignKey(c => c.SueldoDivisa).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UsuarioInformacion_Divisa");
            builder.HasOne(a => a.Empresa).WithMany(b => b.UsuarioInformacions).HasForeignKey(c => c.IdEmpresa).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UsuarioInformacion_Empresa");
            builder.HasOne(a => a.EstadoCivil).WithMany(b => b.UsuarioInformacions).HasForeignKey(c => c.IdEstadoCivil).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UsuarioInformacion_EstadoCivil");
            builder.HasOne(a => a.NivelEstudio).WithMany(b => b.UsuarioInformacions).HasForeignKey(c => c.IdNivelEstudio).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UsuarioInformacion_NivelEstudio");
            builder.HasOne(a => a.Pai).WithMany(b => b.UsuarioInformacions).HasForeignKey(c => c.IdPais).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UsuarioInformacion_Pais");
            builder.HasOne(a => a.Pronombre).WithMany(b => b.UsuarioInformacions).HasForeignKey(c => c.IdPronombre).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UsuarioInformacion_Pronombre");
            builder.HasOne(a => a.TallaPlayera).WithMany(b => b.UsuarioInformacions).HasForeignKey(c => c.IdTallaPlayera).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UsuarioInformacion_TallaPlayera");
            builder.HasOne(a => a.TipoContrato).WithMany(b => b.UsuarioInformacions).HasForeignKey(c => c.IdTipoContrato).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UsuarioInformacion_TipoContrato");
            builder.HasOne(a => a.UsuarioLogin_IdSupervisor).WithMany(b => b.UsuarioInformacions).HasForeignKey(c => c.IdSupervisor).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UsuarioInformacion_Supervisor");
            builder.HasOne(a => a.UsuarioLogin_IdUsuarioLogin).WithOne(b => b.UsuarioInformacion).HasForeignKey<UsuarioInformacion>(c => c.IdUsuarioLogin).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_UsuarioInformacion_UsuarioLogin");

            builder.HasIndex(x => x.NumeroSeguroSocial).HasDatabaseName("UQ__UsuarioI__4B6490811A110918").IsUnique();
            builder.HasIndex(x => x.NumeroColaborador).HasDatabaseName("UQ__UsuarioI__672E3C39969E54E2").IsUnique();
            builder.HasIndex(x => x.IdentificadorNacional).HasDatabaseName("UQ__UsuarioI__76712BA3CE15A48A").IsUnique();
            builder.HasIndex(x => x.Rfc).HasDatabaseName("UQ__UsuarioI__CAFFA85E37A82D25").IsUnique();
            builder.HasIndex(x => x.Curp).HasDatabaseName("UQ__UsuarioI__F46C4CBF12446C4B").IsUnique();
        }
    }

    // UsuarioLogin
    public class UsuarioLoginConfiguration : IEntityTypeConfiguration<UsuarioLogin>
    {
        public void Configure(EntityTypeBuilder<UsuarioLogin> builder)
        {
            builder.ToTable("UsuarioLogin", "dbo");
            builder.HasKey(x => x.IdUsuarioLogin).HasName("PK__UsuarioL__9E973030EA173E85").IsClustered();

            builder.Property(x => x.IdUsuarioLogin).HasColumnName(@"IdUsuarioLogin").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(256)").IsRequired().HasMaxLength(256);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(256)").IsRequired().HasMaxLength(256);
            builder.Property(x => x.NombreCompleto).HasColumnName(@"NombreCompleto").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.FotografiaUrl).HasColumnName(@"FotografiaUrl").HasColumnType("nvarchar(500)").IsRequired(false).HasMaxLength(500);
            builder.Property(x => x.EstaActivo).HasColumnName(@"EstaActivo").HasColumnType("bit").IsRequired();

            builder.HasIndex(x => x.Email).HasDatabaseName("UQ__UsuarioL__A9D10534BC020243").IsUnique();
            builder.HasIndex(x => x.UserName).HasDatabaseName("UQ__UsuarioL__C9F28456395551CB").IsUnique();
        }
    }


    #endregion

}
// </auto-generated>
